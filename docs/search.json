[{"path":"index.html","id":"the-grammar-of-experimental-designs","chapter":"The Grammar of Experimental Designs","heading":"The Grammar of Experimental Designs","text":"Hi ! book work--progress.book include basics experimental design get started edibble R-package extensions plan, design simulate experiments.experimental design huge field, doubt know small portion . find mistakes ’m giving enough due attention credit important concept, please feel let know.","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"Please note book work--progress.book intended anyone interested planning, designing simulating experiments programming language. programming illustrated R language, however, concept may generalised programming languages.book can also serve reference undergraduate graduate courses. section problems can used exercise students. book can also used practitioners involved scientific industrial experiments. book include plenty examples spanning diverse range disciplines.beneficial least knowledge R. Readers may like read XXX basic knowledge R “R Data Science” tidyverse approaches data analysis R.book primarily makes use ggplot2 drawing static plots. default color scheme theme modified applied plots produced ggplot2 henceforth.","code":"\nlibrary(ggplot2)\ntheme_set(theme_classic(base_size = 12))\noptions(\n  ggplot2.discrete.fill = list(\n    c(\"#c8008f\", \"#008a25\"),\n    RColorBrewer::brewer.pal(8, \"Set2\")\n  ),\n  ggplot2.discrete.colour = list(\n    c(\"#c8008f\", \"#008a25\"),\n    RColorBrewer::brewer.pal(8, \"Dark2\")\n  )\n)"},{"path":"basics.html","id":"basics","chapter":"1 The basics of experimental designs","heading":"1 The basics of experimental designs","text":"“design experiment faulty, method interpretation makes decisive must faulty .”–Fisher, 1935, Design ExperimentsThere many articles books dedicated explaining concepts experimental designs. includes seminal book Fisher (1935), Bailey (2008), etc. chapter presents overview statistical concepts pertinent designing experiment.experiments comparative nature, specifically, experiments involve study two experimental conditions primary interest compare outcome different conditions. ’ll therefore find experiments book comparative experiments.heart experiment, ultimately seeking confidence conclusion making analysis experimental data. perhaps emphasised enough experiments human endeavours. Often multiple people involved running experiments key challenge ensure individual sufficient understanding play role well. touch Chapter 3.experiments cost whether financial, resources, time . can consider experimental cost function ability redo experiment . example, experimental resources based examination fossils fossils destroyed experimental process, cost experiment infinite – one chance experiment – ’s absolutely essential plan, design execute experiment well.experimental well requires good understanding subject matter potential sources variation can controlled accounted experimental design. Prior collection data, statistical component experiment tends focussed design experiment, .e. treatments assigned experimental units practical constrains maximise statistical information. consideration, statistical problem experimental design often reduced either randomisation optimisation problem experimental context may stripped away generation design using computer software. discuss Chapter X present get started edibble system construct experimental design Chapter 2.get crux basics experimental design, consider three scenarios . scenario describes experiment technical details reduced doesn’t serve distraction now. scenario, try see can identify basic components build design experiment.Scenario 1: plant growth \nMicrobes potential promoting plant growth increasing abiotic stress tolerance plant. experiment conducted study four bacterial strains known promoting plant growth osmotic stress.Scenario 2: wine tasting \nlarge-scale experiment conducted discern whether expensive wines good value money. experiment involved 450 individuals public tasting expensive inexpensive wine. taster know whether tasting expensive inexpensive wine.Scenario 3: new classification method \nnew statistical method proposed better alternative classification cellular type. number simulation, based number public benchmark datasets, carried compare method different metrics.","code":""},{"path":"basics.html","id":"terminology","chapter":"1 The basics of experimental designs","heading":"1.1 Basic terminology","text":"field experimental design large applied many domains. specialised terminology exist, following terminology fundamental terms commonly understood across domains:treatments: whole set experimental conditions units subjected ,experimental unit: smallest unit treatment can independently applied,observational unit: smallest unit response measured ,block cluster: grouping another unit units within block cluster alike aspect units different blocks clusters,design: intended allotment treatment units,plan layout: actual allocation treatment units,experimental structure: arrangements constrains experimental factors – structure can broadly categorised :\nunit structure: relation units, e.g. pots nested particular glasshouses, subjects segregated sex, ;\ntreatment structure: division treatment levels meaningful groups, e.g. factorial structure means combinations across different treatment factors,\nunit structure: relation units, e.g. pots nested particular glasshouses, subjects segregated sex, ;treatment structure: division treatment levels meaningful groups, e.g. factorial structure means combinations across different treatment factors,balanced experiment: refers replication treatments equalorthogonal design: FIXME: really fundamental termExample 1.1  (plant growth):experimental aim study effects plant growth four particular bacterial strains.experimental units …Experimental design applicable across numerous domains, perhaps surprising domain specific specialised terminology used describe whole experimental designs, e.g. Latin Square Design, Step-Wedge Trial, Beehive Design . recipe named experimental design presented discussed Chapter 4.","code":""},{"path":"basics.html","id":"randomisation","chapter":"1 The basics of experimental designs","heading":"1.2 Randomisation","text":"","code":""},{"path":"basics.html","id":"replications-repetition-and-duplication","chapter":"1 The basics of experimental designs","heading":"1.3 Replications, Repetition and Duplication","text":"","code":""},{"path":"basics.html","id":"pseudo-replications","chapter":"1 The basics of experimental designs","heading":"1.3.1 Pseudo-replications","text":"","code":""},{"path":"basics.html","id":"summary","chapter":"1 The basics of experimental designs","heading":"1.4 Summary","text":"major concepts chapter covered :basic statistical terminology experimental designimportance replication randomisation experimentspitfalls pseudo-replication","code":""},{"path":"basics.html","id":"exercises","chapter":"1 The basics of experimental designs","heading":"1.5 Exercises","text":"farmer like know diet effective increasing weight pigs. three types diet wishes test. scenario, describe experimental aim, treatments, experimental units, observational units experimental design.","code":""},{"path":"start.html","id":"start","chapter":"2 Getting started","heading":"2 Getting started","text":"experimental planning book supported edibble R-package extensions. edibble system built principle system must make easy recover experimental context encouraging user explicit experimental details. get started using system, need first load package:","code":"\nlibrary(edibble)"},{"path":"start.html","id":"setting-the-experimental-structure-and-context","chapter":"2 Getting started","heading":"2.1 Setting the experimental structure and context","text":"edibble system, experiment design built step--step. first step, start initialising design using start_design() user can supply optional title experiment. subsequent steps best specified using pipe operator (%>%) re-exported magrittr package native pipe operator (|>) available R version 4.1 onwards. example, carry following steps:initiate experiment called “first experiment” via start_design();set 24 pots set_units(); thenset treatments 3 levels: 2 bacterial strains (PM398 ZNP1) innoculation set_trts().steps create modify -called “edibble design” (edbl_design) object used represent intermediate construct experimental design. arguments functions set_units() set_trts() employ convention left hand side (LHS) name factor input right hand side (RHS) defines levels. RHS single integer ’s assumed number levels ’s vector ’s name levels.print object, seen , displayed like tree summarising variables defined thus far.view print terminal console, actually see text color coded ’s easier distinguish type variables (e.g. unit treatment). print terminal viewed like . colors customisable discussed Section 2.4.argument names set_units set_trts fixed, easily change name units treatment something meaningful. another experiment statistically equivalent experimental structure previous experiment (24 units 3 levels treatment), “reads” different experimental context – typical user realise experimental units pigs treatments diet.can define one unit factor treatment factor. example , reads : 3 pens (named “North”, “Shade” “Meadow”), 18 pigs, 3 type diets 2 types supplement given frequency either daily weekly.","code":"\nmydesign1 <- start_design(\"My first experiment\") %>% \n  set_units(pot = 24) %>% \n  set_trts(innoculation = c(\"PM398\", \"ZNP1\", \"none\"))\nmydesign1## My first experiment\n## ├─pot (24 levels)\n## └─innoculation (3 levels)\nmydesign2 <- start_design(\"My second experiment\") %>% \n  set_units(pig = 24) %>% \n  set_trts(diet = c(\"high-fat\", \"low-fat\", \"standard\"))\n\nmydesign2## My second experiment\n## ├─pig (24 levels)\n## └─diet (3 levels)\nstart_design(\"My experiment with multiple factors\") %>% \n  set_units(pen = c(\"North\", \"Shade\", \"Meadow\"),\n            pig = 18) %>% \n  set_trts(diet = c(\"high-fat\", \"low-fat\", \"standard\"),\n           supplement = 2, \n           # frequency of supplements:\n           frequency = c(\"daily\", \"weekly\"))## My experiment with multiple factors\n## ├─pen (3 levels)\n## ├─pig (18 levels)\n## ├─diet (3 levels)\n## ├─supplement (2 levels)\n## └─frequency (2 levels)"},{"path":"start.html","id":"a-viable-experimental-design","chapter":"2 Getting started","heading":"2.1.1 A viable experimental design","text":"","code":""},{"path":"start.html","id":"understanding-the-experimental-context","chapter":"2 Getting started","heading":"2.1.2 Understanding the experimental context","text":"","code":""},{"path":"start.html","id":"fitting-a-variety-of-mental-mode","chapter":"2 Getting started","heading":"2.1.3 Fitting a variety of mental mode","text":"","code":""},{"path":"start.html","id":"map-trts","chapter":"2 Getting started","heading":"2.2 Mapping treatment to units","text":"code creates object represents intermediate construct experimental design. complete specification minimum experimental design, still need specify:mapping treatments units, achieved using allot_trts(), andhow treatments actually allocated units via assign_trts().step may feel redundant experiments exactly one unit factor one treatment factor ’s required generalisation experimental structures. addition, serves re-enforce specific actions user.minimum viable experimental design specified, can generate experimental design table (tibble) called edibble parsing object serve_table().","code":"\ndes <- start_design(\"My first animal experiment\") %>% \n  set_units(pig = 24) %>% \n  set_trts(diet = c(\"high-fat\", \"low-fat\", \"standard\")) %>% \n  allot_trts(diet ~ pig) %>% \n  assign_trts(order = \"random\", seed = 1) \nserve_table(des)## # My first animal experiment \n## # An edibble: 24 x 2\n##           pig     diet\n##    <unit(24)> <trt(3)>\n##  1      pig1  high-fat\n##  2      pig2  low-fat \n##  3      pig3  low-fat \n##  4      pig4  low-fat \n##  5      pig5  standard\n##  6      pig6  high-fat\n##  7      pig7  standard\n##  8      pig8  high-fat\n##  9      pig9  standard\n## 10      pig10 standard\n## # … with 14 more rows"},{"path":"start.html","id":"treatment-allotment","chapter":"2 Getting started","heading":"2.2.1 Treatment allotment","text":"","code":"\ndiet_design <- function(...) {\n  start_design(\"A valid nested design\") %>% \n    set_units(pen = 6,\n              pig = nested_in(pen, 3)) %>% \n    set_trts(diet = c(\"high-fat\", \"low-fat\", \"standard\")) %>% \n    allot_trts(...) %>% \n    assign_trts(order = \"systematic\") %>% \n    serve_table()\n}\n\ndiet_design(diet ~ pig)## # A valid nested design \n## # An edibble: 18 x 3\n##          pen        pig     diet\n##    <unit(6)> <unit(18)> <trt(3)>\n##  1      pen1      pig1  high-fat\n##  2      pen1      pig2  low-fat \n##  3      pen1      pig3  standard\n##  4      pen2      pig4  high-fat\n##  5      pen2      pig5  low-fat \n##  6      pen2      pig6  standard\n##  7      pen3      pig7  high-fat\n##  8      pen3      pig8  low-fat \n##  9      pen3      pig9  standard\n## 10      pen4      pig10 high-fat\n## 11      pen4      pig11 low-fat \n## 12      pen4      pig12 standard\n## 13      pen5      pig13 high-fat\n## 14      pen5      pig14 low-fat \n## 15      pen5      pig15 standard\n## 16      pen6      pig16 high-fat\n## 17      pen6      pig17 low-fat \n## 18      pen6      pig18 standard\ndiet_design(diet ~ pen)## # A valid nested design \n## # An edibble: 18 x 3\n##          pen        pig     diet\n##    <unit(6)> <unit(18)> <trt(3)>\n##  1      pen1      pig1  high-fat\n##  2      pen1      pig2  high-fat\n##  3      pen1      pig3  high-fat\n##  4      pen2      pig4  low-fat \n##  5      pen2      pig5  low-fat \n##  6      pen2      pig6  low-fat \n##  7      pen3      pig7  standard\n##  8      pen3      pig8  standard\n##  9      pen3      pig9  standard\n## 10      pen4      pig10 high-fat\n## 11      pen4      pig11 high-fat\n## 12      pen4      pig12 high-fat\n## 13      pen5      pig13 low-fat \n## 14      pen5      pig14 low-fat \n## 15      pen5      pig15 low-fat \n## 16      pen6      pig16 standard\n## 17      pen6      pig17 standard\n## 18      pen6      pig18 standard"},{"path":"start.html","id":"a-viable-experimental-design-1","chapter":"2 Getting started","heading":"2.3 A viable experimental design","text":"viable experimental design specified relationship variables can reconciled single observational unit. example ","code":"\nstart_design(\"An invalid unit structure\") %>% \n  set_units(pen = 6,\n            pig = 18) %>% \n  serve_table()## # An invalid unit structure \n## # An edibble: 0 x 2\n## # … with 2 variables: pen <unit(6)>, pig <unit(18)>\ndiet_design(diet ~ pen) %>% \n  set_rcrds(weight = pig,\n            manager = pen) ## # A valid nested design \n## # An edibble: 18 x 5\n##          pen        pig     diet weight manager\n##    <unit(6)> <unit(18)> <trt(3)> <rcrd>  <rcrd>\n##  1      pen1      pig1  high-fat      ■       ■\n##  2      pen1      pig2  high-fat      ■       x\n##  3      pen1      pig3  high-fat      ■       x\n##  4      pen2      pig4  low-fat       ■       ■\n##  5      pen2      pig5  low-fat       ■       x\n##  6      pen2      pig6  low-fat       ■       x\n##  7      pen3      pig7  standard      ■       ■\n##  8      pen3      pig8  standard      ■       x\n##  9      pen3      pig9  standard      ■       x\n## 10      pen4      pig10 high-fat      ■       ■\n## 11      pen4      pig11 high-fat      ■       x\n## 12      pen4      pig12 high-fat      ■       x\n## 13      pen5      pig13 low-fat       ■       ■\n## 14      pen5      pig14 low-fat       ■       x\n## 15      pen5      pig15 low-fat       ■       x\n## 16      pen6      pig16 standard      ■       ■\n## 17      pen6      pig17 standard      ■       x\n## 18      pen6      pig18 standard      ■       x\ndat <- diet_design(diet ~ pen) %>% \n  set_rcrds(weight = pig,\n            manager = pen) %>% \n  expect_rcrds(weight > 15) %>% \n  simulate_rcrds(weight = sim_normal(~diet + pen + pig, sd = 25) %>% \n                   params(\"mean\", \n                          diet = c(\"high-fat\" = 300,\n                                    \"low-fat\" = 50,\n                                   \"standard\" = 150),\n                          pen = c(\"pen4\" = -270),\n                          pig = rnorm(18)),\n                 manager = sim_form(~pen) %>% \n                   params(pen = sample(rep(c(\"John\", \"Mary\", \"Jane\"), 2))),\n                 .seed = 1, .censor = NA)\nggplot(dat, aes(pen, weight, color = diet)) + \n  geom_point(size = 3) ## Warning: Removed 1 rows containing missing values (geom_point).\ndf <- start_design(\"McIntyre (1955)\") %>% \n  set_units(plant = 8,\n            position = 1:4,\n            leaf = ~plant:position) %>% \n  set_trts(light = c(\"a\", \"b\", \"c\", \"d\")) %>% \n  allot_trts(light ~ leaf) %>% \n  assign_trts() %>% \n  serve_table() "},{"path":"start.html","id":"aes-custom","chapter":"2 Getting started","heading":"2.4 Aesthetic customisations","text":"edibble system offers many levels aesthetic customisations. customisation mostly frivolous serve means users customise elements visually liking. level aethetic customisation edibble system probably little value grand aim constructing experimental design, user finds developer’s default choice liking, least ability modify .","code":""},{"path":"start.html","id":"visualisation","chapter":"2 Getting started","heading":"2.5 Visualisation","text":"","code":"\nlibrary(deggust)"},{"path":"people.html","id":"people","chapter":"3 Roles of people involved in the experiment","heading":"3 Roles of people involved in the experiment","text":"experiment generally involves one person. simplicity, let us suppose three actors:domain expert drives experimental objective intricate knowledge subject area,statistician creates experimental design layout taking account statistical practical constraints, andthe technician carries experiment collects data.actors purely illustrative practice, multiple people can take role, one person can take multiple roles, person necessary specialist role assigned (e.g. statistician role can carried person ’s primarily training statistics). roles can acted single individual. Ideally, parties clarity final experimental design.","code":""},{"path":"cookbook.html","id":"cookbook","chapter":"4 Cookbook","heading":"4 Cookbook","text":"Good design considers units treatments first, allocates treatments units. choose menu named designs.– Bailey, 2008, Design Comparative experimentsThis chapter presents number recipes well known named experimental designs. ingredients recipe described basic terminology (see Section 1.1).well understood experimental design shouldn’t just simply selected recipe. Nonetheless, use named experimental designs prevalent compromising approach used edibble system. every named experimental design presented, function prefixed menu_ prepare recipe code. user supposed copy--paste code modify names units treatments experimental context. can choose generate design table using takeout(), discourage use approaches generate proper design.Named experimental design handy succinctly describing experimental structure treatment allotment units, lose direct association fundamental components make experimental design. can obscure seeing association different named experimental designs. Another reason discourage use named experimental designs encourages users fit experimental resources suit one named experimental design. words, primal goal longer fitting appropriate design given experimental resources becomes adjusting resources fit design. say experimental resources modified desirable design.","code":""},{"path":"cookbook.html","id":"completely-randomised-design","chapter":"4 Cookbook","heading":"4.1 Completely randomised design","text":"completely randomised design, commonly abbreviated CRD, contain two factors: experimental units treatments completely unstructured experiment (.e. grouping factors).can call menu_crd() see code terms fundamental system. omit argument values, random number selected .want generate design table, can use takeout() function parsing named design object created set menu_ functions.choose print output.can quickly plot design using autoplot() deggust package.","code":"\nmenu_crd(t = 5, n = 30, seed = 1)start_design(\"Completely Randomised Design\") %>%\n  set_units(unit = 30) %>%\n  set_trts(trt = 5) %>%\n  allot_trts(trt ~ unit) %>%\n  assign_trts(\"random\", seed = 1) %>%\n  serve_table()\ncrd <- takeout(menu_crd(t = 5, n = 30, seed = 1))\nautoplot(crd)"},{"path":"cookbook.html","id":"randomised-complete-block-design","chapter":"4 Cookbook","heading":"4.2 Randomised complete block design","text":"","code":"\nrcbd <- takeout(menu_rcbd(t = 5, r = 6))\nexamine_recipe(rcbd)start_design(\"Randomised Complete Block Design\") %>%\n  set_units(block = 6,\n            unit = nested_in(block, 5)) %>%\n  set_trts(trt = 5) %>%\n  allot_trts(trt ~ unit) %>%\n  assign_trts(\"random\", seed = 326) %>%\n  serve_table()\nautoplot(rcbd)"},{"path":"cookbook.html","id":"latin-square-design","chapter":"4 Cookbook","heading":"4.3 Latin square design","text":"","code":"\nlsd <- takeout(menu_lsd(t = 6))\nexamine_recipe(lsd)start_design(\"Latin Square Design\") %>%\n  set_units(row = 6,\n            col = 6,\n            unit = ~row:col) %>%\n  set_trts(trt = 6) %>%\n  allot_trts(trt ~ unit) %>%\n  assign_trts(\"random\", seed = 108) %>%\n  serve_table()\nautoplot(lsd)"},{"path":"cookbook.html","id":"factorial-design","chapter":"4 Cookbook","heading":"4.4 Factorial design","text":"","code":"\nfac <- takeout(menu_factorial(trt = c(3, 2)))\nexamine_recipe(fac)start_design(\"Factorial Design\") %>%\n  set_units(unit = 42) %>%\n  set_trts(trt1 = 3,\n           trt2 = 2) %>%\n  allot_trts(~unit) %>%\n  assign_trts(\"random\", seed = 883) %>%\n  serve_table()\nautoplot(fac)"},{"path":"cookbook.html","id":"split-plot-design","chapter":"4 Cookbook","heading":"4.5 Split-plot design","text":"","code":"\nspd <- takeout(menu_split())\nexamine_recipe(spd)start_design(\"Split-Plot Design | Split-Unit Design\") %>%\n  set_units(mainplot = 12,\n             subplot = nested_in(mainplot, 3)) %>%\n  set_trts(trt1 = 2,\n           trt2 = 3) %>%\n  allot_trts(trt1 ~ mainplot,\n             trt2 ~ subplot) %>%\n  assign_trts(\"random\", seed = 11) %>%\n  serve_table()\nautoplot(spd)"},{"path":"cookbook.html","id":"graeco-latin-square-design","chapter":"4 Cookbook","heading":"4.6 Graeco-Latin square design","text":"","code":"\ngraeco <- takeout(menu_graeco())\nexamine_recipe(graeco)start_design(\"Graeco-Latin Square Design\") %>%\n  set_units(row = 6,\n            col = 6,\n            unit = ~row:col) %>%\n  set_trts(trt1 = 6,\n           trt2 = 6) %>%\n  allot_trts(trt1 ~ unit,\n             trt2 ~ unit) %>%\n  assign_trts(\"random\", seed = 304) %>%\n  serve_table()\nautoplot(graeco)"},{"path":"cookbook.html","id":"hyper-graeco-latin-square-design","chapter":"4 Cookbook","heading":"4.7 Hyper-Graeco-Latin square design","text":"","code":"\nhyper_graeco <- takeout(menu_hyper_graeco())\nexamine_recipe(hyper_graeco)start_design(\"Hyper-Graeco-Latin Square Design\") %>%\n  set_units(block1 = 6,\n            block2 = 6,\n            block3 = 6,\n            block4 = 6,\n            unit = ~block1:block2:block3:block4) %>%\n  set_trts(trt = 6) %>%\n  allot_trts(trt ~ unit) %>%\n  assign_trts(\"random\", seed = 313) %>%\n  serve_table()\nautoplot(hyper_graeco)"},{"path":"cookbook.html","id":"youden-square-design","chapter":"4 Cookbook","heading":"4.8 Youden square design","text":"","code":"\nyouden <- takeout(menu_youden())\nexamine_recipe(youden)start_design(\"Youden Square Design\") %>%\n  set_units(row = 13,\n            col = 3,\n            unit = ~row:col) %>%\n  set_trts(trt = 13) %>%\n  allot_trts(trt ~ unit) %>%\n  assign_trts(\"random\", seed = 782) %>%\n  serve_table()\nautoplot(youden)"}]
